function wgs84 = nav2wgs84(nav, interval, period)

% nav2wgs84: transform navigation data to WGS84 earth-fixed coordinates 
%
% Syntax: xyz_wgs84 = nav2wgs84(nav)
% Syntax: xyz_wgs84 = nav2wgs84(nav, interval)
% Syntax: xyz_wgs84 = nav2wgs84(nav, interval, period)
%
% INPUT:
%   nav         - matrix of the broadcast ephemeris parameters 
%                 (generated by /input/read_rinex_nav.m)
%   OPTIONAL:
%   interval    - sampling interval (sec) [Optinal, default 300s]
%   period      - sampling period from the first epoch of each satellite (sec)
%                 [Optional, default 86400s]
%
% OUTPUT:
%   wgs84       - (x,y,z) coordinates in earth-fixed WGS84
%
%   wgs84(1)    = sat number
%   wgs84(2:7)  = toc (Time of Clock) [year,month,day,hour,minute,second]
%   wgs84(8:10) = coordinates in earth-fixed WGS84 [x, y, z] 
%
% EXAMPLE:
%   wgs84 = nav2wgs84(nav)
%   wgs84 = nav2wgs84(nav, 300)
%   wgs84 = nav2wgs84(nav, 300, 86400)
%
% See also READ_RINEX_NAV, FIXY2K.
%

% check input arguments
if nargin < 2
    interval = 300;
end
if nargin < 3
   period = 86400;
end
if nargin > 3
   disp("ERROR: The numbers of input arguments exceed 3. Unexpected exit.");
   return
end

% get satellite list
sat_list = unique(nav(:,1));

% allocate
wgs84 = nan(int64(period/interval)+1, 10); %sat, cal[year,month,day,hour,minute,second], x, y, z; question for int64?
idx = 0; % index of wgs84

% constant
mu = 3.986008 * 1e14; % (m^3/sec^2) earth's universal gravitational constant
Omega_e = 7.292115147 * 1e-5; % (rad/sec) mean earth rotation rate
pi = 3.1415926535898; % pi

% start sampling for each satellite
for i = 1:length(sat_list)
    sat = sat_list(i); % sat number
    nav_ref = nav(nav(:,1)==sat,:); % reference navigation message of sat
    num_ref = length(nav_ref(:,1)); % length of list of nav_ref
    index_ref = 1; % reference index
    start_t = nav(i,19); % start second of week of sampling period
    for t = start_t:interval:(period+start_t)
        % get reference line of nav
        if index_ref < num_ref && nav_ref(index_ref+1,19) <= t
            index_ref = index_ref + 1;
        end
        ref = nav_ref(index_ref,:); % reference line
        % compute true anomaly
        t_k = t - ref(19); % time since reference epoch
        if t_k > 7200 % check t_k if greater than 7200s (2h)
        	warning("Period may be too long, possibly resulting in imprecise coordinates for sat %s at GPS second %s. Time since reference epoch is %s sec.",sat2prn(sat) ,string(t), string(t_k));
        end
        n = sqrt(mu)/(ref(18)^3) + ref(13); % corrected mean motion
        M_k = ref(14) + n * t_k; % mean anomaly at t_k
        e = ref(16); % eccentricity e
        E_k = solve_kepler(M_k, e, 1e-15); % eccentric anomaly
        nu_k = 2*atan(sqrt((1+e)/(1-e))*tan(E_k/2)); % true anomaly
        % augument of latitue
        phi_k = nu_k + ref(25); 
        delta_u_k = ref(17) * sin(2*phi_k) + ref(15) * cos(2*phi_k); % correction
        u_k = phi_k + delta_u_k; % corrected augument of latitue
        % corrected orbit radius
        r_k = ref(18)^2 * (1-e*cos(E_k));
        delta_r_k = ref(12) * sin(2*phi_k) + ref(24) * cos(2*phi_k); % correction
        r_k = r_k + delta_r_k; % corrected orbit radius
        % coordinates in orbital reference system
        x_k = r_k * cos(u_k);
        y_k = r_k * sin(u_k);
        % corrected inclination
        i_k = ref(23) + ref(22) * sin(2*phi_k) + ref(20) * cos(2*phi_k) + ref(27) * t_k;
        % corrected ascending node
        Omega_k = ref(21) + (ref(26) - Omega_e) * t_k - Omega_e * ref(19);
        % WGS84 coordinates
        x_e = x_k * cos(Omega_k) - y_k * sin(Omega_k) * cos(i_k);
        y_e = x_k * sin(Omega_k) + y_k * cos(Omega_k) * cos(i_k);
        z_e = y_k * sin(i_k);
        % fill into wgs84
        idx = idx + 1;
        wgs84(idx, :) = [sat, gpst2cal([ref(29), t]), x_e, y_e, z_e];
    end
end

% remove constant pi from workspace
clear pi;

end


function E = solve_kepler(M, e, eps)
% solve_kepler: solve kepler equation ( M=E-e*sin(E) ) iteratively
%
% INPUT:
%   M   - mean anomaly
%   e   - eccentricity
%   eps - epsilon
%
% OUTPUT:
%   E   - eccentric anomaly
%

% initialize
E = 0; 
E1 = M;

% iteration
while abs(E1 - E) > eps 
    E = E1;
    % Newton's method:  E1 = E - f(E)/f'(E)
    E1 = E - (E - e * sin(E) - M)/(1 - e * cos(E)); 
end
E = E1;

end
